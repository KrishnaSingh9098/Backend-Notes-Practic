                                                          11-05-2024


     //---Accessing file using file system in Synchronous manner
 ----------------------------------------------------------
 let fs=require('fs')

 1--//creating a file using file system

fs.writeFileSync('name of file u want to create','data u want to enter')

2--// read a file using file system

let data=fs.readFileSync('name of the file whose data u want to read')
console.log(data.toString())   

//we use to string because by default data is present in  buffer form so to convert it into string we use toString()

3--// update

fs.writeFileSync('name of file','updated data')

//delete

fs.unlinkSync('name of file to be deleted')
------------------------------------------------------------------------------------------------------

//--Accessing file using file system in ASynchronous manner
----------------------------------------------------------
let fs = require('fs')

1---// creating a file using file system

fs.writeFile('name of file','any data',(err)=>{
      if(err) throw err
      console.log("file created")
})

2---// read a file using file system

// fs.readFile('name of file',(err,data)=>{    two parameters passed here
//      if(err) throw err
//      console.log(data.toString())
// })

3--// update

// fs.writeFile('name of same file created',updated data',(err)=>{
//    if(err) throw err
//    console.log("data updated")
// })

4--//delete

// fs.unlink('name of file to be deleted',(err)=>{
//    if(err) throw err
//       console.log("file deleted")
// })
     
5--//rename--

fs.rename('name of file','name of rename file',(err)=>{
      if(err) throw err
      console.log("file renamed")
})

----------------------------------------------------------------------------------------------------------

Creating server using nodejs
-----------------------------

let http=require('http')
let server=http.createServer((req,res)=>{   
     res.end('hello guys')
})
server.listen(7000,()=>{
   console.log("server is running at portno:6000")
})

fixed parameters
7000-portno.
req-request-- client to server
res-response--server to client                                                     




----------------------------------------------------------------------------------------------------------------------------------------------------

                                                    14-05-2024
express js--framework of node js

FOR installlation of - EPRESS.JS :  npm i express.

            ---npm i express---

//routing

---interview question--

get--less secure,km data bhej skte hai iske saath
post--more secure,more data bhej skte hai iske saath

generally get is used to fetch data and post is use to send data but we can also use get to send data 
but due to security purpose and it send less data we dont use it
--------

--------------------------------------------------------
//creating server using express js
//------------------------

let express=require('express')
let app=express()

-----Static Routing----------

app.get('/',(req,res)=>{   /-by default represent home
    res.send('any mssg')
})
app.get('any path',(req,res)=>{
      res.send('<button>ClickHere</button>')
})
app.get('*',(req,res)=>{          *--if we want that any thing we write on browser gives some mssg we use *
      res.send('given response is not valid')
})
app.listen(portno.,()=>{
      console.log("server is running at portno:4000");
})

                                    

app.use topic name = middle ware.

Get/Post/Put/Patch/Detect = Methods .

npm i nodemon : for taking exact response from the server and your wevbpage



#Static ROuting
#Dynamic Routing  



--------------------------------------------------- 14-05-2024 ---------------------------------------------

       express js--framework of node js

      to install express---in terminal
            ---npm i express

  //routing

---interview question--

get--less secure,km data bhej skte hai iske saath
post--more secure,more data bhej skte hai iske saath

generally get is used to fetch data and post is use to send data but we can also use get to send data 
but due to security purpose and it send less data we dont use it
--------

--------------------------------------------------------
//creating server using express js
//------------------------

let express=require('express')
let app=express()

 ## -----Static Routing---------- ##

app.get('/',(req,res)=>{   /-by default represent home
    res.send('any mssg')
})
app.get('any path',(req,res)=>{
      res.send('<button>ClickHere</button>')
})
app.get('*',(req,res)=>{          *--if we want that any thing we write on browser gives some mssg we use *
      res.send('given response is not valid')
})
app.listen(portno.,()=>{
      console.log("server is running at portno:4000");
})


----------------------------------------- 16:05:2024 ------------THURSDAY---------------------------


Queriperameter and pathparameter
sirf : lagane se vo pathparameter kehlata hai
req.params=parameter for taking request from browser.

req.query jha bhi questuon mark ho
Templating    =: ejs librery

-------------------------------------------------------------------------------------------------
      PATHPARAMETER WORKS EXPLANATION

const express = require('express')
let  app = express()
let port = 5000
app.get('/:r/:a',(req,res)=>{
      let {r,a} = req.params
 console.log(req.params,"hilo")
       res.send(r,a)
 })

 app.listen(port,()=>{
    console.log('server is running in high Speed')
    })
   
 {1}. Whereever you see /: that means os a pathParameter

 The req.params object allows you to capture dynamic values from the URL path. It is useful when you have route patterns
  with placeholders, such as “/users/:a” or “/products/:productId”.
--------------------------------------------------------------------------------------------------------------
//  QUERY PARAMETER WORKS EXPLANATION

const express = require('express')
let  app = express()
let port = 5000

app.get('/search',(req,res)=>{
   let {firstName,lastName} = req.query
    res.send(`${firstName}  ${lastName}`)
})

app.listen(port,()=>{
console.log('first')
})

{1}. Whereever you see /: that means os a pathParameter
{2}. In Browser search :- locolhost:{portno}/search?firstName=Krishna&LastName=Singh

------------------------------------------------------17-05-2024----------------------------------------------


------EJS Templating-librery ----------

For installation of this Templating librery write : npm i ejs
Then create a New folder with the name of : VIews
views naaam k folder ke andar index.ejs naam ki file banegi.
{1} .ejs is compulsary.



-------------------------------- index.js -------------------me banegi-----------------------------------------


{app.set} method takes anty Stringvalue and one more any value

// app .set('view engine','ejs')
// app.get('/',(req,res)=>{
//    res.render('index')
// })

// app.listen(port,()=>{
// console.log('server is running : 5000')
// })



-----------------------------------17-05-2024------------FRIDAY-------------------------------------------------
