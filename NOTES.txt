                                                          11-05-2024



     //---Accessing file using file system in Synchronous manner
 ----------------------------------------------------------
 let fs=require('fs')

 1--//creating a file using file system

fs.writeFileSync('name of file u want to create','data u want to enter')

2--// read a file using file system

let data=fs.readFileSync('name of the file whose data u want to read')
console.log(data.toString())   

//we use to string because by default data is present in  buffer form so to convert it into string we use toString()

3--// update

fs.writeFileSync('name of file','updated data')

//delete

fs.unlinkSync('name of file to be deleted')
------------------------------------------------------------------------------------------------------

//--Accessing file using file system in ASynchronous manner
----------------------------------------------------------
let fs = require('fs')

1---// creating a file using file system

fs.writeFile('name of file','any data',(err)=>{
      if(err) throw err
      console.log("file created")
})

2---// read a file using file system

// fs.readFile('name of file',(err,data)=>{    two parameters passed here
//      if(err) throw err
//      console.log(data.toString())
// })

3--// update

// fs.writeFile('name of same file created',updated data',(err)=>{
//    if(err) throw err
//    console.log("data updated")
// })

4--//delete

// fs.unlink('name of file to be deleted',(err)=>{
//    if(err) throw err
//       console.log("file deleted")
// })
     
5--//rename--

fs.rename('name of file','name of rename file',(err)=>{
      if(err) throw err
      console.log("file renamed")
})

----------------------------------------------------------------------------------------------------------

Creating server using nodejs
-----------------------------

let http=require('http')
let server=http.createServer((req,res)=>{   
     res.end('hello guys')
})
server.listen(7000,()=>{
   console.log("server is running at portno:6000")
})

fixed parameters
7000-portno.
req-request-- client to server
res-response--server to client                                                     




----------------------------------------------------------------------------------------------------------------------------------------------------

                                                    14-05-2024
express js--framework of node js

FOR installlation of - EPRESS.JS :  npm i express.

            ---npm i express---

//routing

---interview question--

get--less secure,km data bhej skte hai iske saath
post--more secure,more data bhej skte hai iske saath

generally get is used to fetch data and post is use to send data but we can also use get to send data 
but due to security purpose and it send less data we dont use it
--------

--------------------------------------------------------
//creating server using express js
//------------------------

let express=require('express')
let app=express()

-----Static Routing----------

app.get('/',(req,res)=>{   /-by default represent home
    res.send('any mssg')
})
app.get('any path',(req,res)=>{
      res.send('<button>ClickHere</button>')
})
app.get('*',(req,res)=>{          *--if we want that any thing we write on browser gives some mssg we use *
      res.send('given response is not valid')
})
app.listen(portno.,()=>{
      console.log("server is running at portno:4000");
})

                                    

app.use topic name = middle ware.

Get/Post/Put/Patch/Detect = Methods .

npm i nodemon : for taking exact response from the server and your wevbpage



#Static ROuting
#Dynamic Routing  



--------------------------------------------------- 14-05-2024 ---------------------------------------------

       express js--framework of node js

      to install express---in terminal
            ---npm i express

  //routing

---interview question--

get--less secure,km data bhej skte hai iske saath
post--more secure,more data bhej skte hai iske saath

generally get is used to fetch data and post is use to send data but we can also use get to send data 
but due to security purpose and it send less data we dont use it
--------

--------------------------------------------------------
//creating server using express js
//------------------------

let express=require('express')
let app=express()

 ## -----Static Routing---------- ##

app.get('/',(req,res)=>{   /-by default represent home
    res.send('any mssg')
})
app.get('any path',(req,res)=>{
      res.send('<button>ClickHere</button>')
})
app.get('*',(req,res)=>{          *--if we want that any thing we write on browser gives some mssg we use *
      res.send('given response is not valid')
})
app.listen(portno.,()=>{
      console.log("server is running at portno:4000");
})


----------------------------------------- 16:05:2024 ------------THURSDAY---------------------------


Queriperameter and pathparameter
sirf : lagane se vo pathparameter kehlata hai
req.params=parameter for taking request from browser.

req.query jha bhi questuon mark ho
Templating    =: ejs librery

-------------------------------------------------------------------------------------------------
      PATHPARAMETER WORKS EXPLANATION

const express = require('express')
let  app = express()
let port = 5000
app.get('/:r/:a',(req,res)=>{
      let {r,a} = req.params
 console.log(req.params,"hilo")
       res.send(r,a)
 })

 app.listen(port,()=>{
    console.log('server is running in high Speed')
    })
   
 {1}. Whereever you see /: that means os a pathParameter

 The req.params object allows you to capture dynamic values from the URL path. It is useful when you have route patterns
  with placeholders, such as “/users/:a” or “/products/:productId”.
--------------------------------------------------------------------------------------------------------------
//  QUERY PARAMETER WORKS EXPLANATION

const express = require('express')
let  app = express()
let port = 5000

app.get('/search',(req,res)=>{
   let {firstName,lastName} = req.query
    res.send(`${firstName}  ${lastName}`)
})

app.listen(port,()=>{
console.log('first')
})

{1}. Whereever you see /: that means os a pathParameter
{2}. In Browser search :- locolhost:{portno}/search?firstName=Krishna&LastName=Singh

------------------------------------------------------17-05-2024----------------------------------------------


------EJS Templating-librery ----------

For installation of this Templating librery write : npm i ejs
Then create a New folder with the name of : VIews
views naaam k folder ke andar index.ejs naam ki file banegi.
{1} .ejs is compulsary.



-------------------------------- index.js -------------------me banegi-----------------------------------------


{app.set} method takes anty Stringvalue and one more any value

// app .set('view engine','ejs')
// app.get('/',(req,res)=>{
//    res.render('index')
// })

// app.listen(port,()=>{
// console.log('server is running : 5000')
// })


render me file or data dono jate hai
send me 

Render : render() function is typically used in web development frameworks like Express.js in Node. 
         js applications to render HTML templates and pass data to them. 

-----------------------------------17-05-2024------------FRIDAY-------------------------------------------------

Calculation could be possible in ejs librery.


const express = require('express')
let app = express()
let port = 5000
let arr = ['hello','hyyy','byy!!','a' ,'b']

app .set('view engine','ejs')
app.use(express.static('public'))
app.get('/',(req,res)=>{
   res.render('index')
})

// app.get('/random',(req,res)=>{
//    let a = Math.floor(Math.random()*100)
//    res.render('random',{a})
// })

app.get('/random',(req,res)=>{
   let a = Math.floor(Math.random()*100)
   res.render('random',{arr})
})


app.listen(port,()=>{
console.log('server is running : 5000')
})


---------- this could be possible on this ---------------------------------------

{1} : <h3> <%= 5+5 %>   method 

{2} : <!-- <h3> <%= a %> </h3> -->

{3} : <!-- <% if(a%2==0) { %>
      <h2> even number</h2>
      <% }
      else
      { %>
      <h3> odd number </h3>
      <% } %> -->

  ---------------------------------------18-05-2024 -------------------------------SATURDAY-----------------  

 Predefined Syntax : Include function ; two files and more with the help of this could me merge together.
                     MAke a folder in views folder with the name of partials , The name partials is important.
                     Then MAke two files in inner of partials folder whos name is Header.ejs & Footer.ejs.

                                                   views
                                                    ↓
                                                             |→ Header.ejs
                                                  Partials →
                                                             |→ Footer.ejs

   The whole work should be done in index.ejs.     {This could be not imp you can choose any file but route of this file could be imp.}                                                     

 Example :<%- include ('./partials/header') %>
          <h1>HEllo new revesion</h1>
          <p>
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Eius, asperiores laudantium. Libero quisquam corporis natus
              eveniet, ut suscipit, non dolores iste dicta, nam quibusdam doloribus?
          </p>
          <%- include ('./partials/footer')%>

index.js : server and route 
  
     const express = require('express')
     let  app = express()
     let port = 5000
     app .set('view engine','ejs')
     app.get('/',(req,res)=>{
     res.render('index')
     })
     app.listen(port,()=>{
     console.log('server is running : 5000')
     })


------------------------- WITH THE HELP OF GET AND POST METHOD FORM SHOULD BE MADE ----------------------------------- 
 
 Form are made on index.ejs. 

   With get method form should be made  


    <fieldset>
        <legend> GET</legend>
        <form action="/user" method="GET">
        <label for="txt1">NAME :- </label>
       <input name="name" type="text"  maxlength="15" size="19" id="txt1" placeholder="name">
       <br>
       <br>
       <label for="tx1">E-Mail:- </label>
        <input name="email" type="email" id="tx1" placeholder="email">
        <br>
        <br>
        <label name="password" for="po">PASSWORD:- </label>
        <input type="password" id="po"  placeholder="password">
        <br>
        <br>
        <button type="submit">submit</button>
    </form>
    </fieldset>

ROute file form this form:
   
   const express = require('express')
     let  app = express()
     let port = 5000
     app .set('view engine','ejs')
     app.get('/user',(req,res)=>{
     let {name,email,password} = req.query
     res.send(`${name} and ${email} and  ${password}`)
     res.send('send')
     })
     app.listen(port,()=>{
     console.log('server is running : 5000')
     })
    
This type of form which was made with get method is not properly save.


-------------------------------------------------------------------------------------------------------
POST METHOD FORM :

ONE METHOD INSTALLATION : app.use(express.urlencoded({extended:true}))


    <fieldset>
        <legend>POST</legend>
        <form action="/user" method="GET">
        <label for="txt1">NAME :- </label>
       <input name="name" type="text"  maxlength="15" size="19" id="txt1" placeholder="name">
       <br>
       <br>
       <label for="tx1">E-Mail:- </label>
        <input name="email" type="email" id="tx1" placeholder="email">
        <br>
        <br>
        <label name="password" for="po">PASSWORD:- </label>
        <input type="password" id="po"  placeholder="password">
        <br>
        <br>
        <button type="submit">submit</button>
    </form>
    </fieldset>


 GET vs POST  vs BODY 


POSt Method : When we uSe postb method data sho

     undefinesd value of body is undefined.




 -----------------------------------Postman----------------------

 Postman is a testing tool for backend code  / backend API testing.

 another software is  : thunder client : extension from vs code.

form data paane ke liye  : app.use(express.urlencoded({extended:true}))


 one more thing install : app.use(express.json()).    


 -------------------------------------------------- MONDAY ------------------------------ 20/05/2024 -------------------------------------------

 HOw CRUD operation should perform and data how can update delete creatre and read in  browser.

Redirect method are use to directly open the webpage .
 

 ------------------- REStful architecture are used -----------------

 Restful routing is actually a proper way to write a code : 

for patch method : npm i method-override .

IMP lines

let methodOverride = require('method-override')
app.use(methodOverride('_method'))


"/blogs/<%=data.id%>?_method=PATCH"






----------------------------------------------------- 23-05-2024 -------------------------------------------------------------

Koi cheej server se delete karana pade tab = server se htana ho tab . 


--------------------------- csr  vs ssr  ---------------------------------------------

let express = require('express')

let app = express()
app.use('/mew',express.static('public'))
 
app.get('/',(req,res)=>{
res.send('hello')
})

app.listen(5000,()=>{
console.log('server runs properly')
})

  # : NOrmal html page ko renderinmg without ejs 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>Static siteeee</h2>
</body>
</html>




------------------------------------  30/05/2024 ------------------------------------------------

DATABASE_MONGOOSE : MONGO DB

 1. show Dbs
2. use mydata
3. show collections
4. bd.users.find()
----------------------------------------- 04/06/2024---------------------------------------------
                                                     DATABASE_CONNECTIVITY
                                   [ : How DataBase should be connected with express. : ]

  Command For INstallation   : NPM i Mongooose

let express = require('express')
let app =express()
let mongoose = require('mongoose')
mongoose.connect('mongodb://localhost:27017/mydata').then(()=>{
console.log('db')
}).catch((err)=>{

    console.log(err,"nhi mila hai")
})

app.get('/',(req,res)=>{
    res.send('haha')
})
app.listen(5000,()=>{
    console.log('hello')
})


( 1.)  model ek feature h jiske throuw  collection create hota hai .

---------------------------------------------------------------------------------------------------------------------

# Some work for learn as like ;

1.0 => How cookie can be Set.
2.0 => HOw bcrypt can be used for password Encryption and De-Cryption.
3.0 => What is JWT And HOW Data can be Store and Take Outside.  { JsonWebToken}


----------------------------- Authentication  SYSTEM---------------------------------------  06/06/24---------------------

Authentication : user ko profile dene se pehle ye check krna hota h ki user hai kaun.
                 so ni that condition they give us id proof .

AUTHENTICATION  :  Server har baar bhool jata hai ki aap kaun ho , ab kyuki server bhool jata hai aap kaun ho to har baar
                    wo har kaam kre liye aapse puchega aap kaun ho. 

 For INSTALLATION  : NPM I bcrypt


 

#index.js     wala code 
------------------------

let express = require('express')
let app =express()
let bcrypt = require('bcrypt')
let mongoose = require('mongoose')
  let User =require('./model/model')
mongoose.connect('mongodb://localhost:27017/fsd78').then(()=>{
console.log('db')
}).catch((err)=>{

    console.log(err,"nhi mila hai")
})
app.use(express.json())

app.post('/signup',async(req,res)=>{
console.log(req.body)
let userData = req.body
let {email} = req.body
let user = await User.findOne({email})
if(user){
    res.send('user already exist')
}
else{
    //res.send('createed')
    userData.password = await bcrypt.hash(userData.password,10)
    console.log(userData.password)
}
//res.send('hehehe')
})

app.listen(5000,()=>{
    console.log('hello')
})

---------------------------------------------------------------------------------

Model folder ke ander model.js naam ki file banegi.

#Model.js       wala code 
---------------------------



let mongoose = require('mongoose')
let userSchema = mongoose.Schema({
    firstName: {
        Type : String,
        
    },
    lastName: {
        type: String,
        
    },
    email : {
        type : String
    },
    password:{
        type:String
    }
})



let User = mongoose.model('User',userSchema)
module.exports=User


 AUTHENTICATION  :  Server har baar bhool jata hai ki aap kaun ho , ab kyuki server bhool jata hai aap kaun ho to har baar
                    wo har kaam kre liye aapse puchega aap kaun ho.


FOR SavinG DATA : let dbUser =  new User  ({
        firstName : userData.firstName,
        lastName : userData.lastName,
        email : userData.email,
        password : userData.password
    })

    await dbUser.save()
    res.send('user acc should be Created')

# -    For Generating token two parameters should be used.

-------------------------------------------- COOKIE------------------------------------------

COOKIES AND SESSION CONCEPT : PEhli baar login krne me browser me ek string save ho jti hain.

 For INSTALLATION  : NPM I cookie-parser

 In code we have to right : const cookieParser = require('cookie-parser')
                          :  app.use(cookieParser())  // for see response also in colsole window.

1.  set krne ke liye RES use hota hai or Read krne ke liye REQ

--------------------------------------------- A-U-T-H-O-R-I-Z-A-T-I-O-N -------------------------------------




AUTHORIZATION :  authorized to perform some tasks which are only allowed to be executed  by the admin.
[ Generally ] : kis cheej ko krne k access h or kis cheej ko krne k access nhi hai

Authorization header ko alg se chipkana padta hai request me / Cookies by default aa jti hai.

 



-----------------------------------------    15/26/2024  --------------------------------

NPM I AXIOS 

for server connection: fronted to backend

NPM I cors  : for restriction allowance with the help of cors.




--- login per server se kuch return krena ; with token fronted per localstorege me store krna ---------



                                                    middleware : 18/06/2024  / lecture 10